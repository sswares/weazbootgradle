version = '0.0.1-SNAPSHOT'
group = 'net.weaz'

buildscript {
    ext {
        springBootVersion = '1.3.5.RELEASE'
        springCloudVersion = 'Brixton.RELEASE'
        springPlatformVersion = '2.0.3.RELEASE'
        springPlatformPluginVersion = '0.5.4.RELEASE'

        nodeVersion = '4.4.2'
        npmVersion = '3.8.5'
        springSamlVersion = '1.0.2.RELEASE'
        wro4jVersion = '1.7.4'
        assertjVersion = '3.4.1'
        logbackVersion = '1.1.7'

        propdepsPluginVersion = '0.0.7'
        flywayPluginVersion = '3.2.1'
        nodePluginVersion = '0.12'
        gruntPluginVersion = '0.12'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://repo.spring.io/plugins-release' }
        maven { url 'https://repo.spring.io/plugins-milestone' }
        maven { url 'https://repo.spring.io/plugins-snapshot' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework.build.gradle:propdeps-plugin:${propdepsPluginVersion}")
        classpath("org.flywaydb:flyway-gradle-plugin:${flywayPluginVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${nodePluginVersion}")
        classpath("com.moowork.gradle:gradle-grunt-plugin:${gruntPluginVersion}")
    }
}

apply plugin: 'com.moowork.node'
apply plugin: 'com.moowork.grunt'

node {
    version = project.nodeVersion
    npmVersion = project.npmVersion
    distBaseUrl = 'https://nodejs.org/dist'
    download = true
    npmCommand = 'npm --no-color'

    workDir = rootProject.file("./frontend/nodejs")
    nodeModulesDir = rootProject.file("./frontend/")
}

task removeNodeModules(type: NpmTask, group: 'node') {
    it.workingDir = rootProject.file("./frontend/")
    args = ['run', 'removeNodeModules']
}

grunt {
    workDir = rootProject.file("./frontend/")
    colors = false
    bufferOutput = false
}

task gruntBuild(type: GruntTask,
        group: 'grunt',
        description: 'Runs the javascript build and generates resources.',
        dependsOn: ['npmInstall']) {
    args = ['build']
}

task gruntEnd2End(type: GruntTask,
        group: 'grunt',
        description: 'Runs end2end tests using Protractor and a headless browser.',
        dependsOn: [':server-main:build', ':server-auth:build']) {
    args = ['e2eBuild']
}

task javascriptUnitTest(type: GruntTask,
        group: 'grunt',
        description: 'Runs javascript unit tests using Karma and a headless browser.',
        dependsOn: ['npmInstall']) {
    args = ['unitTest']
}

subprojects {
    apply plugin: 'spring-boot'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'org.flywaydb.flyway'
    apply plugin: 'maven-publish'

    dependencyManagement {
        imports {
            mavenBom("io.spring.platform:platform-bom:${springPlatformVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }

        dependencies {
            dependency("ch.qos.logback:logback-core:${logbackVersion}")
            dependency("ch.qos.logback:logback-classic:${logbackVersion}")
            dependency("org.assertj:assertj-core:${assertjVersion}")
            dependency("org.springframework.security.extensions:spring-security-saml2-core:${springSamlVersion}")
        }
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/libs-release" }
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://repo.spring.io/libs-snapshot" }
    }

    springBoot {
        executable = true
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }

        ignoreFailures true

        afterTest { desc, result ->
            println "- ${desc.name}: ${result.resultType}"
        }
    }

    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle-gradle.xml')
        configProperties = ["suppressionFile": project(':').file('config/checkstyle/suppressions.xml')]
    }

    task sourceJar(type: Jar,
            group: 'build',
            description: 'Generates a source jar for publishing artifacts.') {
        from sourceSets.main.allJava
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                groupId = project.group
                artifactId = project.name
                version = project.version

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    jar {
        baseName = project.name
        version = rootProject.version
    }

    compileJava.dependsOn processResources
    check.finalizedBy javascriptUnitTest
    check.finalizedBy gruntEnd2End
    jar.dependsOn gruntBuild
}

allprojects {
    task wrapper(type: Wrapper) {
        gradleVersion = '2.12'
    }
}